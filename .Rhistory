library(AppliedPredictiveModeling)
data(AlzheimerDisease)
library(AppliedPredictiveModeling)
library(AppliedPredictiveModeling)
install.packages(AppliedPredictiveModeling)
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
data(concrete)
head(concrete)
library(caret)
install.packages("caret")
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
featurePlot(x=training[c("","","")], y=training$CompressiveStrength, plot="pairs")
head(training)
featurePlot(x=training[c("Age","FineAggregate","CoarseAggregate")], y=training$CompressiveStrength, plot="pairs")
featurePlot(x=training[c("Age","FineAggregate","FlyASh")], y=training$CompressiveStrength, plot="pairs")
featurePlot(x=training[c("Age","FineAggregate","FlyAsh")], y=training$CompressiveStrength, plot="pairs")
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
head(mixtures)
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
head(training)
featurePlot(x=training[,c("Cement Blast", "FurnaceSlag", "FlyAsh", "Water", "Superplasticizer", "CoarseAggregate", "FineAggregate", "Age")], y=training$CompressiveStrength, plot="pairs")
featurePlot(x=training[,c("Cement Blast", "FurnaceSlag", "FlyAsh", "Water", "Superplasticizer", "CoarseAggregate", "FineAggregate", "Age")], y=training$CompressiveStrength, plot="pairs")
head(traini$Water)
head(training$Water)
featurePlot(x=training[,c("Cement Blast", "FurnaceSlag", "FlyAsh", "Water", "Superplasticizer", "CoarseAggregate", "FineAggregate", "Age")], y=training$CompressiveStrength, plot="pairs")
featurePlot(x=training[,c("Cement Blast", "FurnaceSlag", "FlyAsh", "Age")], y=training$CompressiveStrength, plot="pairs")
featurePlot(x=training[,c("Cement Blast")], y=training$CompressiveStrength, plot="pairs")
head(training)
training
gead(training)
head(training)
featurePlot(x=training[,c("Cement Blast", "BlastFurnaceSlag")], y=training$CompressiveStrength, plot="pairs")
featurePlot(x=training[,c("Cement Blast", "BlastFurnaceSlag")], y=training$CompressiveStrength, plot="pairs")
featurePlot(x=training[c("Cement Blast", "BlastFurnaceSlag")], y=training$CompressiveStrength, plot="pairs")
featurePlot(x=training$Cement:Age, y=training$CompressiveStrength, plot="pairs")
featurePlot(x=training$Cement, y=training$CompressiveStrength, plot="pairs")
featurePlot(x=training$Age, y=training$CompressiveStrength, plot="pairs")
featurePlot(x=training$FlyAsh, y=training$CompressiveStrength, plot="pairs")
temp <- nearZeroVar(training, saveMetrics = TRUE)
temp
hist(training$Superplasticizer)
min(training$Superplasticizer)
log(min(training$Superplasticizer)
log(0)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
head(training)
head(training[,grepl("IL", training)])
head(training[grepl("IL", training),])
head(training[grepl("IL", training),])
head(training[,grepl("IL", training)])
head(training[,grepl("IL", training)])
head(training[grepl("IL", training),])
head(grepl("IL", training)
head(grepl("IL", training))
grepl("IL", training)
training[grepl("IL", training)]
training[,grepl("IL", training)]
training[grepl("IL", training),]
modelFit <- train(training$IL_11 ~ IL_8, method="glm", preProcess="pca", data=training)
modelFit <- train(training$IL_11 ~ ., method="glm", preProcess="pca", data=training)
modelFit <- train(training$IL_11 ~ ., method="glm", preProcess="pca", data=training)
modelFit <- train(training$IL_11 ~ IL_8, method="glm", preProcess="pca", data=training)
modelFit
modelFit <- train(training$IL_11:IL_8, method="glm", preProcess="pca", data=training)
modelFit <- train(training$IL_11 ~ training$IL_8, method="glm", preProcess="pca", data=training)
modelFit <- train(training$IL_11:training$IL_8, method="glm", preProcess="pca", data=training)
modelFit <- train(training$IL_11 ~ training$IL_8, method="glm", preProcess="pca", data=training)
modelFit <- train(training$IL_11 ~ ., method="glm", preProcess="pca", data=training)
head(training)
training[,1]
training[1,]
preProc <- preProcess(traiing$IL_11:traiing$IL_8)
traiing$IL_11:traiing$IL_8
training$IL_11:training$IL_8
preProc <- preProcess(training$IL_11:training$IL_8, method="pca")
preProc
library(caret)
setwd("C:/Users/Mike/OneDrive/MOOCs/ML/project")
training <- read.csv("pml-training.csv")
nsv <- nearZeroVar(training, saveMetrics = TRUE)
nsv2 <- nearZeroVar(training, saveMetrics = FALSE)
nsv
nsv2
head(training$x)
training[,-nearZeroVar(training, saveMetrics = FALSE)]
trainingExcludingNearZero <- training[,-nearZeroVar(training, saveMetrics = FALSE)]
data(iris)
names(iris)
modFit <- train(classe ~., method="rpart", data=training)
modFit <- train(classe ~ ., method="rpart", data=training)
head(training$classe)
head(training$classe[na])
table(training$classe)
modFit <- train(classe ~ ., method="rf", data=training)
modFit <- train(classe ~ ., method="rpart", data=trainingExcludingNearZero)
head(training)
head(training[,7:9])
head(training[,1,7:9])
head(training[,1:9])
modFit <- train(classe ~ ., method="rpart", data=trainingExcludingNearZero,1:9)
modFit <- train(classe ~ ., method="rpart", data=trainingExcludingNearZero[,1:9])
table(training)
table(training)
table(trainingExcludingNearZero)
2^31
modFit <- train(classe ~ ., method="rpart", data=trainingExcludingNearZero[,1:9])
modFit <- train(classe ~ ., method="rpart", data=trainingExcludingNearZero)
inTrain <- createDataPartition(y=classe, p=.7, list=FALSE)
inTrain <- createDataPartition(y=training$classe, p=.7, list=FALSE)
modFit <- train(classe ~ ., method="rpart", data=inTrain)
training2 <- training[inTrain,]
modFit <- train(classe ~ ., method="rpart", data=training2)
summary(trainingExcludingNearZero)
qplot(training$user_name, training$classe)
table(training$user_name, training$classe)
training[,1:5]
head(training[,1:5])
nsv <- nearZeroVar(training, saveMetrics = TRUE)
head(nsv)
nsv
head(trainingExcludingNearZero[,1:6])
head(trainingExcludingNearZero[,1:5])
head(trainingExcludingNearZero[,-1:5])
head(trainingExcludingNearZero[,1:100])
head(trainingExcludingNearZero[,1:101])
head(trainingExcludingNearZero[,1:100])
modFit <- train(classe~.,data=trainingExcludingNearZero[,1:100], method="rf", prox=TRUE)
summary(trainingExcludingNearZero)
summary(trainingExcludingNearZero[new_window
="no",])
summary(trainingExcludingNearZero[trainingExcludingNearZero$new_window
="no",])
summary(trainingExcludingNearZero[trainingExcludingNearZero$new_window
=="no",])
trainingExcludingNearZero2 <- (trainingExcludingNearZero[trainingExcludingNearZero$new_window
=="no",5:100])
modFit <- train(classe~.,data=trainingExcludingNearZero2, method="rf", prox=TRUE)
modFit <- train(classe~.,data=trainingExcludingNearZero2, method="rf", preProcess = c("center", "scale") prox=TRUE)
modFit <- train(classe~.,data=trainingExcludingNearZero2, method="rf", preProcess = c("center", "scale"), prox=TRUE)
modFit <- train(classe~.,data=trainingExcludingNearZero, method="rf", preProcess = c("center", "scale"), prox=TRUE)
modFit <- train(classe~.,data=trainingExcludingNearZero, method="rf", preProcess = c("center", "scale"))
